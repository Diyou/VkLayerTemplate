include(C++Utils)

DLL(${PROJECT_NAME} main.Loader.c++)

find_package(Vulkan REQUIRED)
target_link_libraries(${PROJECT_NAME} dotfiles::Utils Vulkan::Vulkan)

# Configure manifest file
set(VK_LAYER_NAME VK_LAYER_${PROJECT_NAME})
string(TOUPPER ${PROJECT_NAME} VK_LAYER_TOGGLE)
set(VK_LAYER_DESCRIPTION "${PROJECT_NAME} Vulkan layer")

set(VKLAYER_MANIFEST_LOCATION /usr/share/vulkan/implicit_layer.d)
set(VK_ADD_IMPLICIT_LAYER_PATH ${CMAKE_BINARY_DIR}${VKLAYER_MANIFEST_LOCATION})

OutputName(${PROJECT_NAME} VK_LAYER_LIB)
file(RELATIVE_PATH RELATIVE_SOURCE_PATH ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
set(VK_LAYER_LIB ${CMAKE_BINARY_DIR}/${RELATIVE_SOURCE_PATH}/${VK_LAYER_LIB})

Configure(Manifest.json ${VK_ADD_IMPLICIT_LAYER_PATH}/${PROJECT_NAME}.json)

# Debug environment
ADD_DEBUG_ARGS(vkgears)
ADD_DEBUG_ENV_VARS(
    VK_LOADER_DEBUG=layer,warn,error
    ${VK_LAYER_TOGGLE}=1
    VK_ADD_IMPLICIT_LAYER_PATH=${VK_ADD_IMPLICIT_LAYER_PATH}
)
